* Test data

#+BEGIN_SRC hs :tangle test.hs
-- this file is generated by tangling H99.org in emacs. do not modify manually.

import H99

az = ['a'..'z']
l  = [1,2,3]
ll = [1..10]

testFunc ::(Show f) => String -> f -> IO () 
testFunc name f = do 
    putStrLn $ "Testing function " ++ name
    print f

main :: IO ()
main = do
    testFunc "myReverse" (myReverse l)
    testFunc "myReverse" (myReverse ll)
    testFunc "myReverse" (myReverse az)

    testFunc "isPalindrome" (isPalindrome  l)
    testFunc "isPalindrome" (isPalindrome  p1)
    testFunc "isPalindrome" (isPalindrome  p2)


#+END_SRC

* Module Header
#+BEGIN_SRC hs :tangle yes
-- this file is generated by tangling H99.org in emacs. do not modify manually.

module H99 (
    myReverse,
    isPalindrome
)
where

#+END_SRC
* Problem 5
(*) Reverse a list.

Example in Haskell:
#+BEGIN_EXAMPLE
Prelude> myReverse "A man, a plan, a canal, panama!"
"!amanap ,lanac a ,nalp a ,nam A"
Prelude> myReverse [1,2,3,4]
[4,3,2,1]
#+END_EXAMPLE

#+BEGIN_SRC hs :tangle yes
myReverse :: [a] -> [a]
myReverse l = myReverse' l []
myReverse' [] accu = accu
myReverse' (x:xs) accu = myReverse' xs (x:accu)
#+END_SRC


* Problem 6
(*) Find out whether a list is a palindrome. A palindrome can be read forward or backward; e.g. (x a m a x).

Example in Haskell:
#+BEGIN_EXAMPLE
*Main> isPalindrome [1,2,3]
False
*Main> isPalindrome "madamimadam"
True
*Main> isPalindrome [1,2,4,8,16,8,4,2,1]
True
#+END_EXAMPLE

#+BEGIN_SRC hs :tangle test.hs
-- test data for P6, palindrome
p1 = "madamimadam"
p2 = [1,2,4,8,16,8,4,2,1]

#+END_SRC
#+BEGIN_SRC hs :tangle yes
isPalindrome :: (Eq a) => [a] -> Bool
isPalindrome [] = True
isPalindrome l = if l == myReverse l 
                     then True 
                     else False
#+END_SRC
